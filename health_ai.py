# -*- coding: utf-8 -*-
"""HEALTH AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mELGBRqsxPzlLRj3-l9uq6g5pqaI2Fdc
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=512, temperature=0.7):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_new_tokens=max_length,
            temperature=temperature,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    if response.startswith(prompt):
        response = response[len(prompt):].strip()
    return response.strip()

def disease_prediction(symptoms):
    prompt = (
        f"Based on the following symptoms, suggest possible medical conditions "
        f"and general non-prescriptive recommendations. Always emphasize consulting a doctor.\n\n"
        f"Symptoms: {symptoms}\n\n"
        f"Possible conditions and recommendations (informational only):"
    )
    return generate_response(prompt, max_length=300)

def treatment_plan(condition, age, gender, medical_history):
    prompt = (
        f"Provide a general, non-prescriptive treatment overview for the condition below. "
        f"Include home-care tips and lifestyle guidance, and remind to consult a physician.\n\n"
        f"Condition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\n"
        f"Treatment Plan (informational only):"
    )
    return generate_response(prompt, max_length=400)

css = """
.title {font-size: 30px; font-weight: 700; text-align: center; margin-bottom: 8px; color: #1E3A8A;}
.disclaimer {font-size: 14px; color: #b91c1c; text-align: center; margin-bottom: 15px;}
.gr-button.primary {background-color: #2563EB !important; color: white !important; font-weight: 600;}
"""

with gr.Blocks(theme=gr.themes.Soft(primary_hue="blue", secondary_hue="green"), css=css) as app:
    gr.Markdown("<div class='title'>üè• Medical AI Assistant</div>")
    gr.Markdown("<div class='disclaimer'>‚ö†Ô∏è This is for informational purposes only. Not a substitute for professional medical advice.</div>")

    with gr.Tabs():
        with gr.TabItem("üß™ Disease Prediction"):
            with gr.Row():
                with gr.Column(scale=1):
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("üîç Analyze Symptoms", variant="primary")
                with gr.Column(scale=1):
                    prediction_output = gr.Textbox(
                        label="Possible Conditions & Recommendations",
                        lines=16
                    )
            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("üíä Treatment Plan"):
            with gr.Row():
                with gr.Column(scale=1):
                    condition_input = gr.Textbox(label="Medical Condition", placeholder="e.g., diabetes, migraine, hypertension...")
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(choices=["Male", "Female", "Other"], label="Gender", value="Male")
                    history_input = gr.Textbox(label="Medical History", placeholder="Previous conditions, allergies, or None", lines=3)
                    plan_btn = gr.Button("üìã Generate Treatment Plan", variant="primary")
                with gr.Column(scale=1):
                    plan_output = gr.Textbox(
                        label="Personalized Treatment Plan (Informational only)",
                        lines=16
                    )
            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

    gr.Markdown("**Note:** This project demonstrates the use of Generative AI in healthcare awareness. Always consult healthcare professionals for real medical guidance.")

if __name__ == "__main__":
    app.launch(share=True)